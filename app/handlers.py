import re

from aiogram import Bot, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram import Router
from aiogram.fsm.context import FSMContext 
from aiogram.types import Message, FSInputFile, CallbackQuery

from app.database import Database
from app.get_text_horoscope import get_text_horoscope
import app.keyboards as kb
from app.state import RegisterState
from config import DATABASE_NAME, ZODIACS

router = Router()

async def start(message: Message, bot: Bot):
    '''–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç.'''
    await bot.send_message(
        chat_id=message.from_user.id,
        text='–ü—Ä–∏–≤–µ—Ç!üòÄüëãüèª –≠—Ç–æ –ì–æ—Ä–æ—Å–∫–æ–ø-–±–æ—Ç!\n'
             '–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–øüîÆ\n'
             '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ", '
             '–µ—Å–ª–∏ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —Ç—É—Ç –ª–∏–±–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é.',
        reply_markup=kb.register_keyboard
    )

async def start_register(message: Message, state: FSMContext, bot: Bot):
    db = Database(DATABASE_NAME)
    user = db.select_user(message.from_user.id)
    if user:
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f'{user[1]}, –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!'
        )
    else:
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f'–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n'
                  '–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?'
        )
        await state.set_state(state=RegisterState.regName)

async def register_name(message: Message, state: FSMContext, bot: Bot):
    await bot.send_message(
        chat_id=message.from_user.id,
        text=f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {message.text}!\n'
              '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
              '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: +7XXXXXXXXXX'
    )
    await state.update_data(regname=message.text)
    # —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(state=RegisterState.regPhone)

async def register_phone(message: Message, state: FSMContext, bot: Bot):
    if (re.findall('^\+?[7][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$', message.text)):
        await bot.send_message(
            chat_id=message.from_user.id,
            text='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n'
                 '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞üòå',
            reply_markup=kb.zodiac
        )
        await state.update_data(regphone=message.text)
        await state.set_state(state=RegisterState.regZodiac)
    else:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )

async def choose_zodiac(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(regzodiac=message.text)
    db = Database(DATABASE_NAME)
    user = db.select_user(message.from_user.id)
    if user:
        db.change_zodiac(message.text, message.from_user.id)
        msg = await bot.send_message(
            chat_id=message.from_user.id,
            text=f'{user[1]}, –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '
                 f'{message.text}!üòå'
        )
        db.update_zodiac_message_id(msg.message_id, message.from_user.id)
    else:
        reg_data = await state.get_data()
        reg_name = reg_data.get('regname')
        reg_phone = reg_data.get('regphone')
        reg_zodiac = reg_data.get('regzodiac')
        msg = await bot.send_message(
            chat_id=message.from_user.id,
            text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {reg_name}!ü§ó\n'
                 f'–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {reg_zodiac}'
            )
        db.add_user(reg_name, reg_phone, reg_zodiac, message.from_user.id)
        db.update_zodiac_message_id(msg.message_id, message.from_user.id)
    await state.clear()
    await dayly_horoscope(message=message, bot=bot)

async def change_zodiac(message: Message, state: FSMContext, bot: Bot):
    await bot.send_message(
        chat_id=message.from_user.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞üòå',
        reply_markup=kb.zodiac
    )
    await state.set_state(state=RegisterState.regZodiac)

async def dayly_horoscope(message: Message, bot: Bot):
    db = Database(DATABASE_NAME)
    zodiac = db.get_zodiac(message.from_user.id)
    zodiac = ZODIACS[zodiac]
    text = get_text_horoscope()
    gif_file = FSInputFile(path=f'./media/{zodiac}.gif')
    db.update_last_horoscope_date(message.from_user.id)
    await bot.send_animation(
        chat_id=message.from_user.id,
        animation=gif_file,
        caption=text,
        parse_mode=ParseMode.HTML,
        reply_markup=kb.update
    )

async def update_dayly_horoscope(callback_query: CallbackQuery):
    updated_text = get_text_horoscope()
    await callback_query.message.edit_caption(
        caption=updated_text,
        reply_markup=kb.update,
        parse_mode=ParseMode.HTML,
    )

async def clear_history(message: Message, bot: Bot):
    db = Database(DATABASE_NAME)
    user = db.select_user(message.from_user.id)
    if user:
        last_message_id = db.get_zodiac_message_id(message.from_user.id)
        try:
            for i in range(message.message_id, 0, -1):
                if i != last_message_id:
                    await bot.delete_message(
                        chat_id=message.from_user.id, message_id=i
                    )
                else:
                    await message.answer(
                        text='–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ '
                             '—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∑–Ω–∞–∫–æ–º –∑–æ–¥–∏–∞–∫–∞.'
                    )
        except TelegramBadRequest as ex:
            if ex.message == 'Bad Request: message to delete not found':
                print('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            else:
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex}')
    else:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.'
        )

async def unknown_command(message: Message, bot: Bot):
    await bot.send_message(
        chat_id=message.from_user.id,
        text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª.'
    )
